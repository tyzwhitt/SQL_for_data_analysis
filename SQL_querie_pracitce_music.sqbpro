<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="SQL_querie_pracitce_music.db" readonly="0" foreign_keys="0" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="0"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="4026"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="5" parent="0"/><expanded_item id="10" parent="0"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="V_AvgTotal" custom_title="0" dock_id="1" table="4,10:mainV_AvgTotal"/><dock_state state="000000ff00000000fd000000010000000200000248000001edfc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000002480000011700ffffff000002480000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Album" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="56"/><column index="2" value="280"/><column index="3" value="53"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Employee" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="74"/><column index="2" value="70"/><column index="3" value="70"/><column index="4" value="156"/><column index="5" value="67"/><column index="6" value="156"/><column index="7" value="156"/><column index="8" value="218"/><column index="9" value="85"/><column index="10" value="38"/><column index="11" value="54"/><column index="12" value="70"/><column index="13" value="140"/><column index="14" value="140"/><column index="15" value="195"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Genre" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="54"/><column index="2" value="148"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="V_AvgTotal" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="85"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">--example of comment
/* another way to write comment */
</sql><sql name="SQL 2*">/*
created by: Ty Whittlesey
create date: 09/29/2025
description: This query display Customers FirstName, LastName, Email
*/
SELECT
FirstName AS[Customer First Name], 
LastName AS'Customer Last Name',
Email AS EMAIL
FROM
Customer
ORDER BY
FirstName ASC,
LastName DESC
LIMIT 10</sql><sql name="SQL 3*">/* How many customers purchased two songs at $.99 each?
*/

SELECT
InvoiceDate,
BillingAddress,
BillingCity,
total
FROM
Invoice
WHERE
total BETWEEN 1.98 AND 5.00
ORDER BY
InvoiceDate</sql><sql name="SQL 4*">/* How many customers purchased IN?
*/

SELECT
InvoiceDate,
BillingAddress,
BillingCity,
total
FROM
Invoice
WHERE
total IN (1.98, 3.96)
ORDER BY
InvoiceDate</sql><sql name="SQL 5*">/* How many invoices were billed in cities with B?
*/

--% dont care what comes next

SELECT
InvoiceDate,
BillingAddress,
BillingCity,
total
FROM
Invoice
WHERE
BillingCity LIKE '%B%'
ORDER BY
InvoiceDate</sql><sql name="SQL 6*">/* Get all invoices were billied after 2010-05-22 and have a total of less than 3.00?
*/

SELECT
InvoiceDate,
BillingAddress,
BillingCity,
total
FROM
Invoice
WHERE
DATE(InvoiceDate)&gt;'2010-05-22' AND total &lt;3.00
ORDER BY
InvoiceDate</sql><sql name="SQL 7*">/* all invoices who's total is greater than 1.98 and billing city starts with P or starts with D?
*/

SELECT
InvoiceDate,
BillingAddress,
BillingCity,
total
FROM
Invoice
WHERE
total &gt; 1.98 AND (BillingCity LIKE 'P%' OR BillingCity LIKE 'D%')
ORDER BY
InvoiceDate</sql><sql name="SQL 8*">/* WSDA GOAL:
They want as many customers as possible to spend between $7 and $15
sales catogories:
Baseline Purchase - BETWEEN $.99 and $1.99
low purchase - BETWEEN $2.0 and $6.99
Target purchase - BETWEEN $7 and $15
Top Performer - Above $15.0
*/

SELECT
InvoiceDate,
BillingAddress,
BillingCity,
total,
CASE
WHEN total &lt;2.00 THEN 'Baseline Purchase'
WHEN total BETWEEN 2.00 AND 6.99 THEN 'Low Purchase'
WHEN total BETWEEN 7.0 AND 15.00 THEN 'Target Purchase'
ELSE 'Top Performer'
END AS PurchaseType
FROM
Invoice
WHERE PurchaseType = 'Top Performer'
ORDER BY
BillingCity</sql><sql name="SQL 9*">/*JOINS
*/

SELECT
c.LastName,
c.FirstName,
i.InvoiceId,
i.CustomerId,
i.InvoiceDate,
i.total
FROM
Invoice AS i
INNER JOIN
Customer AS c
ON
i.CustomerId = c.CustomerId
ORDER BY c.CustomerId</sql><sql name="SQL 10*">/*JOINS one or more tables | what employees are responsible for the 10 highest individual saels?
*/

SELECT
e.FirstName,
e.LastName,
c.FirstName,
c.LastName,
c.SupportRepId,
i.CustomerId,
i.total
FROM
Invoice AS i
INNER JOIN
Customer AS c
ON
i.CustomerId = c.CustomerId
INNER JOIN
Employee AS e
ON c.SupportRepId=e.EmployeeId
ORDER BY
i.total DESC
LIMIT 10</sql><sql name="SQL 11*">/* working on joining columns concatenate and then shorting strings truncat
then using upper and lower functions
*/

SELECT
FirstName,
LastName,
Address,
FirstName||''||LastName||''||Address||','||City||''||State||''||PostalCode AS [Mailing Address],
LENGTH(postalcode),
substr(postalcode, 1,5) AS [5 Digit Postal Code],
Upper(firstname) AS [First Name ALL caps],
lower(lastname) AS [Last Name ALL Lower]
FROM
Customer
WHERE
Country = 'USA'</sql><sql name="SQL 13*">/* Date and time functions 
*/

SELECT
LastName,
FirstName,
BirthDate,
strftime('%Y-%m-%d',BirthDate) AS [Birthdate No Timecode],
strftime('%Y-%m-%d','now')-strftime('%Y-%m-%d', BirthDate) AS Age

FROM
Employee</sql><sql name="SQL 14*">/* aggragate funciton
*/

SELECT
SUM(Total) AS [Total Sales],
round(avg(Total),2) AS [Average Sales],
max(Total) AS [Maximum Sales],
MIN(Total) AS [Minimum Sales],
Count (*) AS [Sales Count]

FROM
Invoice</sql><sql name="SQL 15*">/*
Groupby
*/

SELECT
BillingCity,
round(avg(total),2)
FROM
Invoice
WHERE
BillingCity LIKE 'B%'
GROUP BY
BillingCity
HAVING
avg(total)&gt;5
ORDER BY
BillingCity</sql><sql name="SQL 16*">/*Subqueries
*/

SELECT
InvoiceDate,
BillingAddress,
BillingCity,
total
FROM
Invoice
WHERE
total &lt;
(select avg (total) from invoice)
ORDER BY
Total DESC</sql><sql name="SQL 17*">/*Aggregated subqueries
*/

SELECT
BillingCity,
AVG(total) AS [City Average],
(select avg(total) from Invoice) AS [Global Average]
FROM
Invoice
GROUP BY
BillingCity
ORDER BY
BillingCity</sql><sql name="SQL 18*">/* non-aggregate subQ
*/

SELECT
InvoiceDate,
BillingAddress,
BillingCity
FROM
Invoice
WHERE
InvoiceDate &gt;
(SELECT
InvoiceDate
FROM
Invoice
WHERE
InvoiceId = 251)</sql><sql name="SQL 19*">/* Returning Multiple Values from a subquery
*/


SELECT
InvoiceDate,
BillingAddress,
BillingCity
FROM 
Invoice

WHERE
InvoiceDate IN
(SELECT
InvoiceDate
FROM
Invoice
WHERE
InvoiceId IN (251, 252, 254))</sql><sql name="SQL 20*">/* Subqueries and DISTINCT
*/

SELECT
TrackId,
Composer,
Name
FROM
Track
WHERE
TrackId
NOT IN


(SELECT
DISTINCT
TrackId
FROM
InvoiceLine
ORDER BY
TrackId)</sql><sql name="SQL 21*">/*views
*/

CREATE VIEW V_AvgTotal AS
SELECT
round(avg(total),2) AS [Average Total]
FROM
Invoice</sql><sql name="Edit View V_AvgTotal*">DROP VIEW IF EXISTS &quot;main&quot;.&quot;V_AvgTotal&quot;;
CREATE VIEW V_AvgTotal AS
SELECT
round(avg(total),2) AS [Average Total]
FROM
Invoice</sql><sql name="SQL 23*">/* VIEW EX
*/

CREATE VIEW V_Tracks_InvoiceLine AS
SELECT
il.InvoiceId,
il.UnitPrice,
il.Quantity,
t.Name,
t.Composer,
t.Milliseconds
FROM
InvoiceLine il
INNER JOIN
Track t
ON
il.Trackid = t.TrackId</sql><sql name="SQL 24*">/*DML INSERT
*/

INSERT INTO
Artist(Name)
VALUES('Bob Marley')</sql><sql name="SQL 25*">/* DML UPDATE
*/

UPDATE
Artist
SET Name = 'Damien Marley'
WHERE
ArtistId = 276</sql><sql name="SQL 26*">/* DML DELETE
*/

DELETE FROM
Artist
WHERE
Artistid = 276</sql><sql name="SQL 27*">/* How many tracks do not have a Composer
*/

SELECT
Composer,
Name
FROM
Track
WHERE
LENGTH(Composer)=0
</sql><sql name="SQL 28*">/* which track appears at the top of the Track table when sorted in descending ORDER
*/

SELECT
Name
FROM
Track
ORDER BY Name DESC</sql><sql name="SQL 29*">/* How many customers last names starts with the letter G
*/

SELECT
LastName
FROM
Customer
WHERE 
LastName LIKE'G%'</sql><current_tab id="19"/></tab_sql></sqlb_project>
